apiVersion: v1
kind: Namespace
metadata:
  name: keycloak
---
apiVersion: batch/v1
kind: Job
metadata:
  name: ssl-cert-generator
  namespace: keycloak
spec:
  template:
    spec:
      containers:
      - name: cert-generator
        image: alpine/openssl:latest
        command:
        - /bin/sh
        - -c
        - |
          mkdir -p /ssl
          openssl req -nodes -new -x509 \
            -subj "/C=US/ST=/L=/O=solo.io/OU=/CN=keycloak.default" \
            -addext "subjectAltName = DNS:keycloak.default,DNS:keycloak.keycloak.svc.cluster.local,DNS:localhost" \
            -keyout /ssl/server.key \
            -out /ssl/server.cert
          
          # Create the secret
          kubectl create secret generic keycloak-ssl-certs \
            --from-file=server.cert=/ssl/server.cert \
            --from-file=server.key=/ssl/server.key \
            --namespace=keycloak \
            --dry-run=client -o yaml | kubectl apply -f -
        volumeMounts:
        - name: ssl-volume
          mountPath: /ssl
        env:
        - name: KUBERNETES_SERVICE_HOST
          value: "kubernetes.default.svc"
        - name: KUBERNETES_SERVICE_PORT
          value: "443"
      volumes:
      - name: ssl-volume
        emptyDir: {}
      restartPolicy: OnFailure
      serviceAccountName: ssl-cert-generator
  backoffLimit: 3
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ssl-cert-generator
  namespace: keycloak
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: keycloak
  name: secret-manager
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create", "get", "update", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: ssl-cert-generator-binding
  namespace: keycloak
subjects:
- kind: ServiceAccount
  name: ssl-cert-generator
  namespace: keycloak
roleRef:
  kind: Role
  name: secret-manager
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: keycloak
  namespace: keycloak
spec:
  replicas: 1
  selector:
    matchLabels:
      app: keycloak
  template:
    metadata:
      labels:
        app: keycloak
    spec:
      containers:
      - name: keycloak
        image: quay.io/keycloak/keycloak:21.1.1
        args:
        - start-dev
        - --hostname
        - keycloak.default
        - --import-realm
        - --https-certificate-file=/opt/keycloak/ssl/server.cert
        - --https-certificate-key-file=/opt/keycloak/ssl/server.key
        env:
        - name: KEYCLOAK_ADMIN
          value: admin
        - name: KEYCLOAK_ADMIN_PASSWORD
          value: admin
        - name: KEYCLOAK_ADMIN_EMAIL
          value: admin@example.com
        ports:
        - containerPort: 8080
          name: http
        - containerPort: 8443
          name: https
        volumeMounts:
        - name: ssl-volume
          mountPath: /opt/keycloak/ssl
          readOnly: true
        - name: realm-data
          mountPath: /opt/keycloak/data/import
          readOnly: true
        readinessProbe:
          httpGet:
            path: /realms/master
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
      volumes:
      - name: ssl-volume
        secret:
          secretName: keycloak-ssl-certs
      - name: realm-data
        configMap:
          name: realm-data
          optional: true
---
apiVersion: v1
kind: Service
metadata:
  name: keycloak
  namespace: keycloak
spec:
  selector:
    app: keycloak
  ports:
  - name: http
    port: 8080
    targetPort: 8080
  - name: https
    port: 8443
    targetPort: 8443
  type: LoadBalancer